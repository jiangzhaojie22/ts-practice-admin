{
  "include": [
    "**/*.ts",
    "src/**/*.d.ts",
    "src/types/**/*.d.ts",
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue"
  ], // 指定被编译文件所在的目录
  "compilerOptions": {
    "target": "esnext", // 目标语言的版本
    "module": "esnext", // 生成代码的模板标准
    "moduleResolution": "node", // 指定模块解析策略
    "jsx": "preserve", // 指定JSX代码生成用于的开发环境
    "sourceMap": true, // 是否生成相应的Map映射的文件
    "resolveJsonModule": true, // 是否解析 JSON 模块
    "esModuleInterop": true, // 允许export=导出，由import from 导入
    "skipLibCheck": true, // 是否跳过声明文件的类型检查，这可以在编译期间以牺牲类型系统准确性为代价来节省时间
    "allowSyntheticDefaultImports": true, // 是否允许从没有默认导出的模块中默认导入
    "lib": [
      "esnext",
      "dom"
    ], // TS需要引用的库
    "types": [
      "vite/client"
    ], // 用来指定需要包含的模块，并将其包含在全局范围内
    "noEmit": true, // 不生成编译后的文件
    "baseUrl": "./", // 用于解析非绝对模块名的基本目录，相对模块不受影响。
    "paths": {
      "@/*": [
        "src/*"
      ] // 用于设置模块名称基于baseUrl的路径映射关系。
    }
  },
  "compileOnSave": false // 如果设为true,在我们编辑了项目文件保存的时候，编辑器会根据tsconfig.json的配置更新重新生成文本
}